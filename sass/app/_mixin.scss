// #############################
//  App Mixins
// #############################

@mixin show($height: auto){
    height: $height;
    visibility: visible;
    opacity: 1;
}

@mixin hide($height: 0){
    height: $height;
    visibility: hidden;
    opacity: 0;
}

@mixin triangle($direction: "up", $color: $black, $border-size: 8px){
    @if(direction == "up")     { @include triangle-up($color, $border-size)    };
    @if(direction == "right")  { @include triangle-right($color, $border-size) };
    @if(direction == "down")   { @include triangle-down($color, $border-size)  };
    @if(direction == "left")   { @include triangle-left($color, $border-size)  };
}

@mixin triangle-up($color: $black, $border-size: 8px){
    border-bottom:  solid $border-size $color;
    border-left:    solid $border-size transparent;
    border-right:   solid $border-size transparent;
}

@mixin triangle-right($color: $black, $border-size: 8px){
    border-left:     solid $border-size $color;
    border-top:      solid $border-size transparent;
    border-bottom:   solid $border-size transparent;
}

@mixin triangle-down($color: $black, $border-size: 8px){
    border-top:     solid $border-size $color;
    border-left:    solid $border-size transparent;
    border-right:   solid $border-size transparent;
}

@mixin triangle-left($color: $black, $border-size: 8px){
    border-right:    solid $border-size $color;
    border-top:      solid $border-size transparent;
    border-bottom:   solid $border-size transparent;
}

@mixin horizontal-align($position: relative){
    position: $position;
    top: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%); 
}

@mixin vertical-align($position: relative){
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%); 
}

@mixin repeat-rule($width: 95%, $margin-vert: 15px, $margin-side: auto, $include: false){
    $margin: $margin-vert $margin-side;
    
    @if $include == true {
        &:before {
            display: block;
            content: "";
            width: $width;
            border-bottom: solid 1px lighten($grey, $light-4);
            margin: $margin; 
        }   
    } @else {
        & + &:before {
            display: block;
            content: "";
            width: $width;
            border-bottom: solid 1px lighten($grey, $light-4);
            margin: $margin; 
        }   
    }
}

// #############################
//  Compatibility Mixins
// #############################

@mixin border-radius($value){
    -webkit-border-radius: $value;
    -moz-border-radius: $value;
    border-radius: $value;
}

@mixin transform($transform){
    -webkit-transform: $transform;
	-moz-transform: $transform;
	-ms-transform: $transform;
	-o-transform: $transform;
	transform: $transform;
}

@mixin transition($value: $default-transition){
    -webkit-transition: $value;
    -moz-transition: $value;
    -o-transition: $value;
    transition: $value;
}

@mixin size($size){
    @if(length($size) == 1){
        width: $size;    
    }
    @if(length($size) == 2){
        width: nth($size, 1);    
        height: nth($size, 2);
    }
    
}

@mixin position($position){
    $position-map: (
        "absolute",
        "fixed",
        "relative",
        "static",
    );
    
    @if(length($position) > 0){
        $type: nth($position, 1);
		
		@if(not contains($position-map, $type)){
			@error "#{$type} is not a valid position type.";
		} @else {
			$top: 0;
			$right: 0;
			$bottom: 0;
			$left: 0;

			$elements: length($position);
			@if($elements > 1){
				@if($elements - 1 == 2) {
					// top left
					$top: nth($position, 2);
					$left: nth($position, 3);
				} @else if($elements - 1 == 4) {
					// top right bottom left   
					$top: nth($position, 2);
					$right: nth($position, 3);
					$bottom: nth($position, 4);
					$left: nth($position, 5);
				} @else {
					@error "Position values must be in 'top left' or 'top right bottom left' formats.";
				}
			}
			
			position: $type;
			@if(not unitless($top))    { top: $top; }
			@if(not unitless($right))  { right: $right; }
			@if(not unitless($bottom)) { bottom: $bottom; }
			@if(not unitless($left))   { left: $left; }
		}
	}    
}


@mixin center($types ...){
    $center-map: (
        "block",
        "inline",
        "both",
        "horizontal",
        "vertical"
    );
    
    $used: ();
    @each $type in $types {
        @if(not contains($center-map, $type)){
            @error "#{$type} is not a valid center type.";
        } @else if(contains($used, $type)) {
            @error "#{$type} has already been specified once.";
        } @else if($type == "both"){
            @include position(absolute 50% 50%);
            @include transform(translate(-50%, -50%));
            $used: append($used, "both");
        } @else if($type == "horizontal"){
            @include position(absolute 50% 0);
            @include transform(translateX(-50%));
        } @else if($type == "vertical"){
            @include position(absolute 0 50%);
            @include transform(translateY(-50%));
        } @else if($type == "block"){
            display: block;
            margin-left: auto;
            margin-right: auto;
        } @else if($type == "inline"){
            text-align: center;
        } @else {
            @error "Your center input '#{$type}' is malformed.";
        }
    }
}    